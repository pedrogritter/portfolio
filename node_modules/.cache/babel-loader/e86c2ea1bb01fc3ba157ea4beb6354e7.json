{"ast":null,"code":"var _require = require('./library'),\n    get = _require.get,\n    withMinAndMaxMedia = _require.withMinAndMaxMedia,\n    makeErrorMessage = _require.makeErrorMessage;\n\nexports.makeStyledBreakpoints = function (options) {\n  var _options = options || {};\n\n  var state = {\n    pathToMediaQueries: _options.pathToMediaQueries || ['breakpoints'],\n    errorPrefix: _options.errorPrefix || '[styled-breakpoints]: ',\n    defaultMediaQueries: _options.defaultMediaQueries || {\n      xs: '0px',\n      sm: '576px',\n      md: '768px',\n      lg: '992px',\n      xl: '1200px'\n    },\n    browserContext: 16,\n    invariant: function invariant(condition, message) {\n      if (!condition) {\n        throw new Error(state.errorPrefix + message);\n      }\n    },\n    throwInvalidBreakValue: function throwInvalidBreakValue(breaks) {\n      Object.keys(breaks).forEach(function (x) {\n        state.invariant(x.indexOf('px') !== -1, \"Check your theme. '\".concat(breaks[x], \"' is invalid breakpoint. Use pixels.\"));\n      });\n    },\n    throwIsInvalidBreakName: function throwIsInvalidBreakName(breakName, breaks) {\n      state.invariant(breaks[breakName], makeErrorMessage(breakName, breaks));\n    },\n    throwIsLastBreak: function throwIsLastBreak(breakName, breaks) {\n      var names = Object.keys(breaks);\n      var penultimateBreakName = names[names.length - 2];\n      var isValid = names.indexOf(breakName) !== names.length - 1;\n      state.invariant(isValid, \"Don't use '\".concat(breakName, \"' because it doesn't have a maximum width. Use '\").concat(penultimateBreakName, \"'. See https://github.com/mg901/styled-breakpoints/issues/4 .\"));\n    },\n    throwIsInvalidNextBreakValue: function throwIsInvalidNextBreakValue(name, breaks) {\n      state.invariant(breaks[name], \"'\".concat(name, \"' is invalid breakpoint name. Use '\").concat(Object.keys(breaks).slice(0, -1).join(', '), \"'.\"));\n    },\n    throwIsInvalidOrientation: function throwIsInvalidOrientation(x) {\n      state.invariant(x === 'portrait' || x === 'landscape', \"'\".concat(x, \"' is invalid orientation. Use 'landscape' or 'portrait'.\"));\n    },\n    withOrientationOrNot: function withOrientationOrNot(breakpoint, orientation) {\n      if (orientation) {\n        state.throwIsInvalidOrientation(orientation);\n        return \"\".concat(breakpoint, \" and (orientation: \").concat(orientation, \")\");\n      }\n\n      return breakpoint;\n    },\n    toEm: function toEm(x) {\n      return \"\".concat(parseFloat(x) / state.browserContext, \"em\");\n    },\n    getBreakpointsFromTheme: function getBreakpointsFromTheme() {\n      var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return get(state.pathToMediaQueries, theme, state.defaultMediaQueries);\n    },\n    getNextBreakpointName: function getNextBreakpointName(name) {\n      return function (breaks) {\n        state.throwIsInvalidBreakName(name, breaks);\n        state.throwIsLastBreak(name, breaks);\n        var names = Object.keys(breaks);\n        return names[names.indexOf(name) + 1];\n      };\n    },\n    // Maximum breakpoint width. Null for the largest (last) breakpoint.\n    // The maximum value is calculated as the minimum of the next one less 0.02px\n    // to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n    // See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n    // Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n    // See https://bugs.webkit.org/show_bug.cgi?id=178261\n    getNextBreakpointValue: function getNextBreakpointValue(name, breaks) {\n      state.throwIsInvalidNextBreakValue(name, breaks);\n      var getNextName = state.getNextBreakpointName(name);\n      return \"\".concat(parseFloat(breaks[getNextName(breaks)]) - 0.02, \"px\");\n    },\n    getBreakpointValue: function getBreakpointValue(name, breaks) {\n      state.throwIsInvalidBreakName(name, breaks);\n      return breaks[name];\n    },\n    calcMinWidth: function calcMinWidth(name, theme) {\n      return state.toEm(state.getBreakpointValue(name, state.getBreakpointsFromTheme(theme)));\n    },\n    calcMaxWidth: function calcMaxWidth(name, theme) {\n      return state.toEm(state.getNextBreakpointValue(name, state.getBreakpointsFromTheme(theme)));\n    },\n    up: function up(name, orientation) {\n      return function (props) {\n        return state.withOrientationOrNot(\"@media (min-width: \".concat(state.calcMinWidth(name, props.theme), \")\"), orientation);\n      };\n    },\n    down: function down(name, orientation) {\n      return function (props) {\n        return state.withOrientationOrNot(\"@media (max-width: \".concat(state.calcMaxWidth(name, props.theme), \")\"), orientation);\n      };\n    },\n    between: function between(min, max, orientation) {\n      return function (props) {\n        return state.withOrientationOrNot(withMinAndMaxMedia(state.calcMinWidth(min, props.theme), state.calcMaxWidth(max, props.theme)), orientation);\n      };\n    },\n    only: function only(name, orientation) {\n      return function (props) {\n        return state.withOrientationOrNot(withMinAndMaxMedia(state.calcMinWidth(name, props.theme), state.calcMaxWidth(name, props.theme)), orientation);\n      };\n    }\n  };\n  return state;\n};","map":{"version":3,"sources":["/home/gritter/Desktop/Personal Projects/portfolio/node_modules/styled-breakpoints/core/index.js"],"names":["require","get","withMinAndMaxMedia","makeErrorMessage","exports","makeStyledBreakpoints","options","_options","state","pathToMediaQueries","errorPrefix","defaultMediaQueries","xs","sm","md","lg","xl","browserContext","invariant","condition","message","Error","throwInvalidBreakValue","breaks","Object","keys","forEach","x","indexOf","throwIsInvalidBreakName","breakName","throwIsLastBreak","names","penultimateBreakName","length","isValid","throwIsInvalidNextBreakValue","name","slice","join","throwIsInvalidOrientation","withOrientationOrNot","breakpoint","orientation","toEm","parseFloat","getBreakpointsFromTheme","theme","getNextBreakpointName","getNextBreakpointValue","getNextName","getBreakpointValue","calcMinWidth","calcMaxWidth","up","props","down","between","min","max","only"],"mappings":"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","sourcesContent":["const { get, withMinAndMaxMedia, makeErrorMessage } = require('./library');\n\nexports.makeStyledBreakpoints = (options) => {\n  const _options = options || {};\n  const state = {\n    pathToMediaQueries: _options.pathToMediaQueries || ['breakpoints'],\n    errorPrefix: _options.errorPrefix || '[styled-breakpoints]: ',\n    defaultMediaQueries: _options.defaultMediaQueries || {\n      xs: '0px',\n      sm: '576px',\n      md: '768px',\n      lg: '992px',\n      xl: '1200px',\n    },\n    browserContext: 16,\n\n    invariant(condition, message) {\n      if (!condition) {\n        throw new Error(state.errorPrefix + message);\n      }\n    },\n    throwInvalidBreakValue(breaks) {\n      Object.keys(breaks).forEach((x) => {\n        state.invariant(\n          x.indexOf('px') !== -1,\n          `Check your theme. '${breaks[x]}' is invalid breakpoint. Use pixels.`\n        );\n      });\n    },\n    throwIsInvalidBreakName(breakName, breaks) {\n      state.invariant(breaks[breakName], makeErrorMessage(breakName, breaks));\n    },\n    throwIsLastBreak(breakName, breaks) {\n      const names = Object.keys(breaks);\n      const penultimateBreakName = names[names.length - 2];\n      const isValid = names.indexOf(breakName) !== names.length - 1;\n\n      state.invariant(\n        isValid,\n        `Don't use '${breakName}' because it doesn't have a maximum width. Use '${penultimateBreakName}'. See https://github.com/mg901/styled-breakpoints/issues/4 .`\n      );\n    },\n    throwIsInvalidNextBreakValue(name, breaks) {\n      state.invariant(\n        breaks[name],\n        `'${name}' is invalid breakpoint name. Use '${Object.keys(breaks)\n          .slice(0, -1)\n          .join(', ')}'.`\n      );\n    },\n    throwIsInvalidOrientation(x) {\n      state.invariant(\n        x === 'portrait' || x === 'landscape',\n        `'${x}' is invalid orientation. Use 'landscape' or 'portrait'.`\n      );\n    },\n    withOrientationOrNot(breakpoint, orientation) {\n      if (orientation) {\n        state.throwIsInvalidOrientation(orientation);\n\n        return `${breakpoint} and (orientation: ${orientation})`;\n      }\n\n      return breakpoint;\n    },\n    toEm(x) {\n      return `${parseFloat(x) / state.browserContext}em`;\n    },\n    getBreakpointsFromTheme(theme = {}) {\n      return get(state.pathToMediaQueries, theme, state.defaultMediaQueries);\n    },\n    getNextBreakpointName(name) {\n      return (breaks) => {\n        state.throwIsInvalidBreakName(name, breaks);\n        state.throwIsLastBreak(name, breaks);\n\n        const names = Object.keys(breaks);\n\n        return names[names.indexOf(name) + 1];\n      };\n    },\n    // Maximum breakpoint width. Null for the largest (last) breakpoint.\n    // The maximum value is calculated as the minimum of the next one less 0.02px\n    // to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n    // See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n    // Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n    // See https://bugs.webkit.org/show_bug.cgi?id=178261\n\n    getNextBreakpointValue(name, breaks) {\n      state.throwIsInvalidNextBreakValue(name, breaks);\n      const getNextName = state.getNextBreakpointName(name);\n\n      return `${parseFloat(breaks[getNextName(breaks)]) - 0.02}px`;\n    },\n    getBreakpointValue(name, breaks) {\n      state.throwIsInvalidBreakName(name, breaks);\n\n      return breaks[name];\n    },\n    calcMinWidth(name, theme) {\n      return state.toEm(\n        state.getBreakpointValue(name, state.getBreakpointsFromTheme(theme))\n      );\n    },\n    calcMaxWidth(name, theme) {\n      return state.toEm(\n        state.getNextBreakpointValue(name, state.getBreakpointsFromTheme(theme))\n      );\n    },\n    up(name, orientation) {\n      return (props) =>\n        state.withOrientationOrNot(\n          `@media (min-width: ${state.calcMinWidth(name, props.theme)})`,\n          orientation\n        );\n    },\n    down(name, orientation) {\n      return (props) =>\n        state.withOrientationOrNot(\n          `@media (max-width: ${state.calcMaxWidth(name, props.theme)})`,\n          orientation\n        );\n    },\n    between(min, max, orientation) {\n      return (props) =>\n        state.withOrientationOrNot(\n          withMinAndMaxMedia(\n            state.calcMinWidth(min, props.theme),\n            state.calcMaxWidth(max, props.theme)\n          ),\n          orientation\n        );\n    },\n    only(name, orientation) {\n      return (props) =>\n        state.withOrientationOrNot(\n          withMinAndMaxMedia(\n            state.calcMinWidth(name, props.theme),\n            state.calcMaxWidth(name, props.theme)\n          ),\n          orientation\n        );\n    },\n  };\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"script"}